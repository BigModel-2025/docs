{
  "openapi": "3.0.1",
  "info": {
    "title": "Z.AI API",
    "description": "Z.AI API available endpoints",
    "license": {
      "name": "Z.AI Developer Agreement and Policy",
      "url": "https://chat.z.ai/legal-agreement/terms-of-service"
    },
    "version": "1.0.0",
    "contact": {
      "name": "Z.AI Developers",
      "url": "https://chat.z.ai/legal-agreement/privacy-policy",
      "email": "user_feedback@z.ai"
    }
  },
  "servers": [
    {
      "url": "https://api.z.ai/api",
      "description": "Production server"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/paas/v4/chat/completions": {
      "post": {
        "description": "Create a chat completion model that generates AI replies for given conversation messages. It supports multimodal inputs (text, images, audio, video), offers configurable parameters (like temperature, max tokens, tool use), and supports both streaming and non-streaming output modes.",
        "parameters": [
          {
            "$ref": "#/components/parameters/AcceptLanguage"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatCompletionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Business processing successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatCompletionResponse"
                }
              }
            }
          },
          "default": {
            "description": "The request has failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/paas/v4/videos/generations": {
      "post": {
        "description": "CogVideoX is a video generation large model developed by Z.AI, equipped with powerful video generation capabilities. Simply inputting text or images allows for effortless video creation.\n\nVidu: A high-performance video large model that combines high consistency and high dynamism, with precise semantic understanding and exceptional reasoning speed.",
        "parameters": [
          {
            "$ref": "#/components/parameters/AcceptLanguage"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "title": "CogVideoX-3",
                    "$ref": "#/components/schemas/CogVideoX3Request"
                  },
                  {
                    "title": "Vidu: Text to Video",
                    "$ref": "#/components/schemas/ViduText2VideoRequest"
                  },
                  {
                    "title": "Vidu: Image to Video",
                    "$ref": "#/components/schemas/ViduImage2VideoRequest"
                  },
                  {
                    "title": "Vidu: First & Last Frame to Video",
                    "$ref": "#/components/schemas/ViduFrames2VideoRequest"
                  },
                  {
                    "title": "Vidu: Ref to Video",
                    "$ref": "#/components/schemas/ViduReference2VideoRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Business processing successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VideoResponse"
                }
              }
            }
          },
          "default": {
            "description": "The request has failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/paas/v4/async-result/{id}": {
      "get": {
        "description": "This endpoint is used to query the result of an asynchronous request.",
        "parameters": [
          {
            "$ref": "#/components/parameters/AcceptLanguage"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Task id."
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Business processing successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "model": {
                      "type": "string",
                      "description": "Model name."
                    },
                    "video_result": {
                      "type": "array",
                      "description": "Video generation results.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "url": {
                            "type": "string",
                            "description": "Video url."
                          },
                          "cover_image_url": {
                            "type": "string",
                            "description": "Video cover url."
                          }
                        }
                      }
                    },
                    "task_status": {
                      "type": "string",
                      "description": "Processing status, `PROCESSING (processing)`, `SUCCESS (success)`, `FAIL (failure)`. Note: Processing status needs to be obtained via query."
                    },
                    "request_id": {
                      "type": "string",
                      "description": "Task number submitted by the user during the client request or generated by the platform."
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "The request has failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/paas/v4/web_search": {
      "post": {
        "description": "The Web Search API is a specialized search engine for large language models. Building upon traditional search engine capabilities like web crawling and ranking, it enhances intent recognition to return results better suited for LLM processing (including webpage titles, URLs, summaries, site names, favicons, etc.).",
        "parameters": [
          {
            "$ref": "#/components/parameters/AcceptLanguage"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebSearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Business processing successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebSearchResponse"
                }
              }
            }
          },
          "default": {
            "description": "The request has failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/paas/v4/files": {
      "post": {
        "description": "This API is designed for uploading auxiliary files (such as glossaries, terminology lists) to support the translation service. It allows users to upload reference materials that can enhance translation accuracy and consistency.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "purpose": {
                    "type": "string",
                    "description": "Upload purpose (agent)",
                    "default": "agent",
                    "enum": [
                      "agent"
                    ]
                  },
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "File to upload. Limit to `100MB`. Allowed formats: `pdf`, `doc`, `xlsx`, `ppt`, `txt`, `jpg`, `png`."
                  }
                },
                "required": [
                  "purpose",
                  "file"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Business processing successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Unique identifier of the uploaded file."
                    },
                    "object": {
                      "type": "string",
                      "description": "Object type."
                    },
                    "bytes": {
                      "type": "integer",
                      "description": "File size in bytes."
                    },
                    "filename": {
                      "type": "string",
                      "description": "Name of the uploaded file."
                    },
                    "purpose": {
                      "type": "string",
                      "description": "Purpose of the uploaded file."
                    },
                    "created_at": {
                      "type": "integer",
                      "description": "Timestamp of file creation."
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "The request has failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents": {
      "post": {
        "description": "General Translation: General Translation API provides large model-based multilingual translation services, including general translation, paraphrase translation, two-step translation, and three-pass translation strategies. It supports automatic language detection, glossary customization, translation suggestions, and streaming output. Users only need to call the Translation API, input the text to be processed, specify the source language (auto-detection supported) and target language to receive high-quality translation results. \n\n Popular Special Effects Videos: Popular special effects videos are intelligent templates launched based on trending features from pan-entertainment platforms, designed to precisely adapt to short video creative production needs. Currently, three effect templates are available: `French Kiss`, `Body Shake Dance`, and `Sexy Me`. After selecting a template, users only need to upload an image and enter corresponding prompts to generate a special effects video.",
        "parameters": [
          {
            "$ref": "#/components/parameters/AcceptLanguage"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "title": "General Translation",
                    "$ref": "#/components/schemas/TranslationAgentRequest"
                  },
                  {
                    "title": "Popular Special Effects Videos",
                    "$ref": "#/components/schemas/SpecialEffectsVideosAgentRequest"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Business processing successful",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "General Translation",
                      "$ref": "#/components/schemas/TranslationAgentResponse"
                    },
                    {
                      "title": "Popular Special Effects Videos",
                      "$ref": "#/components/schemas/SpecialEffectsVideosAgentResponse"
                    }
                  ]
                },
                "examples": {
                  "General Translation": {
                    "value": {
                      "id": "<string>",
                      "agent_id": "<string>",
                      "choices": [
                        {
                          "index": 123,
                          "finish_reason": "<string>",
                          "messages": [
                            {
                              "role": "<string>",
                              "content": {
                                "text": "<string>",
                                "type": "<string>"
                              }
                            }
                          ]
                        }
                      ],
                      "usage": {
                        "prompt_tokens": 123,
                        "completion_tokens": 123,
                        "total_tokens": 123,
                        "total_calls": 123
                      }
                    }
                  },
                  "Popular Special Effects Videos": {
                    "value": {
                      "status": "<string>",
                      "agent_id": "<string>",
                      "async_id": "<string>"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "The request has failed.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "General Translation",
                      "$ref": "#/components/schemas/Error"
                    },
                    {
                      "title": "Popular Special Effects Videos",
                      "$ref": "#/components/schemas/SpecialEffectsVideosAgentError"
                    }
                  ]
                },
                "examples": {
                  "General Translation": {
                    "value": {
                      "code": 123,
                      "message": "<string>"
                    }
                  },
                  "Popular Special Effects Videos": {
                    "value": {
                      "status": "<string>",
                      "agent_id": "<string>",
                      "error": {
                        "code": "<string>",
                        "message": "<string>"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/agents/async-result": {
      "post": {
        "description": "This endpoint is used to query the result of an asynchronous request.",
        "parameters": [
          {
            "$ref": "#/components/parameters/AcceptLanguage"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommonAgentResultRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Business processing successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommonAgentResultResponse"
                }
              }
            }
          },
          "default": {
            "description": "The request has failed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpecialEffectsVideosAgentError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "AcceptLanguage": {
        "name": "Accept-Language",
        "in": "header",
        "schema": {
          "type": "string",
          "description": "Config desired response language for HTTP requests.",
          "default": "en-US,en",
          "enum": [
            "en-US,en"
          ]
        },
        "required": true
      }
    },
    "schemas": {
      "ChatCompletionRequest": {
        "required": [
          "model",
          "messages"
        ],
        "type": "object",
        "properties": {
          "model": {
            "type": "string",
            "description": "The model code to be called. GLM-4.5 and GLM-4.5-Air are the latest flagship model series, foundational models specifically designed for agent applications.",
            "example": "glm-4.5",
            "default": "glm-4.5",
            "enum": [
              "glm-4.5",
              "glm-4.5-air",
              "glm-4.5-x",
              "glm-4.5-airx",
              "glm-4.5-flash",
              "glm-4-32b-0414-128k"
            ]
          },
          "messages": {
            "type": "array",
            "description": "The current conversation message list as the model’s prompt input, provided in JSON array format, e.g.,`{“role”: “user”, “content”: “Hello”}`. Possible message types include system messages, user messages, assistant messages, and tool messages. Note: The input must not consist of system messages or assistant messages only.",
            "items": {
              "oneOf": [
                {
                  "title": "用户消息",
                  "type": "object",
                  "properties": {
                    "role": {
                      "type": "string",
                      "enum": ["user"],
                      "description": "消息作者的角色",
                      "default": "user"
                    },
                    "content": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "文本消息内容（可从上方切换至多模态消息）",
                          "example": "What opportunities and challenges will the Chinese large model industry face in 2025?"
                        },
                        {
                          "type": "array",
                          "description": "多模态消息内容，支持文本、图片、视频和音频",
                          "items": {
                            "$ref": "#/components/schemas/MultimodalContentItem"
                          }
                        }
                      ]
                    }
                  },
                  "required": ["role", "content"]
                },
                {
                  "title": "系统消息",
                  "type": "object",
                  "properties": {
                    "role": {
                      "type": "string",
                      "enum": ["system"],
                      "description": "消息作者的角色",
                      "default": "system"
                    },
                    "content": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "消息文本内容",
                          "example": "You are a helpful assistant."
                        },
                        {
                          "type": "array",
                          "description": "多模态消息内容，支持文本、图片、视频和音频",
                          "items": {
                            "$ref": "#/components/schemas/MultimodalContentItem"
                          }
                        }
                      ]
                    }
                  },
                  "required": ["role", "content"]
                },

                {
                  "title": "助手消息",
                  "type": "object",
                  "description": "可包含工具调用",
                  "properties": {
                    "role": {
                      "type": "string",
                      "enum": ["assistant"],
                      "description": "消息作者的角色",
                      "default": "assistant"
                    },
                    "content": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "文本消息内容（可从上方切换至多模态消息）",
                          "example": "I'll help you with that analysis."
                        },
                        {
                          "type": "array",
                          "description": "多模态消息内容，支持文本、图片、视频和音频",
                          "items": {
                            "$ref": "#/components/schemas/MultimodalContentItem"
                          }
                        }
                      ]
                    },
                    "tool_calls": {
                      "type": "array",
                      "description": "模型生成的工具调用消息。当提供此字段时，content通常为空。",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "工具调用ID"
                          },
                          "type": {
                            "type": "string",
                            "description": "工具类型，支持web_search、retrieval、function",
                            "enum": ["function", "web_search", "retrieval"]
                          },
                          "function": {
                            "type": "object",
                            "description": "函数调用信息，当type为function时不为空",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "函数名称"
                              },
                              "arguments": {
                                "type": "string",
                                "description": "函数参数，JSON格式字符串"
                              }
                            },
                            "required": ["name", "arguments"]
                          }
                        },
                        "required": ["id", "type"]
                      }
                    }
                  },
                  "required": ["role"]
                },
                {
                  "title": "工具消息",
                  "type": "object",
                  "properties": {
                    "role": {
                      "type": "string",
                      "enum": ["tool"],
                      "description": "消息作者的角色",
                      "default": "tool"
                    },
                    "content": {
                      "oneOf": [
                        {
                          "type": "string",
                          "description": "消息文本内容",
                          "example": "Function executed successfully with result: ..."
                        },
                        {
                          "type": "array",
                          "description": "多模态消息内容，支持文本、图片、视频和音频",
                          "items": {
                            "$ref": "#/components/schemas/MultimodalContentItem"
                          }
                        }
                      ]
                    },
                    "tool_call_id": {
                      "type": "string",
                      "description": "指示此消息对应的工具调用 ID"
                    }
                  },
                  "required": ["role", "content", "tool_call_id"]
                }
              ]
            },
            "minItems": 1
          },
          "request_id": {
            "type": "string",
            "description": "Passed by the user side, needs to be unique; used to distinguish each request. If not provided by the user side, the platform will generate one by default."
          },
          "do_sample": {
            "type": "boolean",
            "example": true,
            "default": true,
            "description": "When do_sample is true, sampling strategy is enabled; when do_sample is false, sampling strategy parameters such as temperature and top_p will not take effect. Default value is `true`."
          },
          "stream": {
            "type": "boolean",
            "example": false,
            "default": false,
            "description": "This parameter should be set to false or omitted when using synchronous call. It indicates that the model returns all content at once after generating all content. Default value is false. If set to true, the model will return the generated content in chunks via standard Event Stream. When the Event Stream ends, a `data: [DONE]` message will be returned."
          },
          "thinking": {
            "$ref": "#/components/schemas/ChatThinking"
          },
          "temperature": {
            "type": "number",
            "description": "Sampling temperature, controls the randomness of the output, must be a positive number within the range: `[0.0, 1.0]`. The GLM-4.5 series default value is `0.6`, GLM-4-32B-0414-128K default value is `0.75`.",
            "format": "float",
            "example": 0.6,
            "default": 0.6,
            "minimum": 0.0,
            "maximum": 1.0
          },
          "top_p": {
            "type": "number",
            "description": "Another method of temperature sampling, value range is: `[0.0, 1.0]`. The GLM-4.5 series default value is `0.95`, GLM-4-32B-0414-128K default value is `0.9`.",
            "format": "float",
            "example": 0.95,
            "default": 0.95,
            "minimum": 0.0,
            "maximum": 1.0
          },
          "max_tokens": {
            "type": "integer",
            "description": "The maximum number of tokens for model output, the GLM-4.5 series supports 96K maximum output, GLM-4-32B-0414-128K supports 16K maximum output.",
            "example": 1024,
            "minimum": 1,
            "maximum": 98304
          },
          "tools": {
            "type": "array",
            "description": "A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.\n",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/FunctionToolSchema"
                },
                {
                  "$ref": "#/components/schemas/RetrievalToolSchema"
                },
                {
                  "$ref": "#/components/schemas/WebSearchToolSchema"
                }
              ]
            }
          },
          "user_id": {
            "type": "string",
            "description": "Unique ID for the end user, 6–128 characters. Avoid using sensitive information.",
            "minLength": 6,
            "maxLength": 128
          },
          "stop": {
            "type": "array",
            "description": "Stop word list. Generation stops when the model encounters any specified string. Currently, only one stop word is supported, in the format [\"stop_word1\"].",
            "items": {
              "type": "string"
            },
            "maxItems": 1
          },
          "response_format": {
            "type": "object",
            "description": "Specifies the response format of the model. Defaults to text. Supports two formats:{ \"type\": \"text\" } plain text mode, returns natural language text, { \"type\": \"json_object\" } JSON mode, returns valid JSON data. When using JSON mode, it’s recommended to clearly request JSON output in the prompt.",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["text", "json_object"],
                "default": "text",
                "description": "Output format type: text for plain text, json_object for JSON-formatted output."
              }
            },
            "required": ["type"]
          }
        }
      },
      "MultimodalContentItem": {
        "oneOf": [
          {
            "title": "文本",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["text"],
                "description": "内容类型为文本",
                "default": "text"
              },
              "text": {
                "type": "string",
                "description": "文本内容"
              }
            },
            "required": ["type", "text"],
            "additionalProperties": false
          },
          {
            "title": "图片",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["image_url"],
                "description": "内容类型为图片URL",
                "default": "image_url"
              },
              "image_url": {
                "type": "object",
                "description": "图片信息",
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "图片的URL地址或Base64编码。图像大小上传限制为每张图像5M以下，且像素不超过6000*6000。支持jpg、png、jpeg格式。注意：GLM-4V-Flash不支持Base64编码。GLM-4V-Plus-0111最多支持同时处理5张图像。"
                  }
                },
                "required": ["url"],
                "additionalProperties": false
              }
            },
            "required": ["type", "image_url"],
            "additionalProperties": false
          },
          {
            "title": "音频",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": ["input_audio"],
                "description": "内容类型为音频输入",
                "default": "input_audio"
              },
              "input_audio": {
                "type": "object",
                "description": "音频信息，仅glm-4-voice支持音频输入",
                "properties": {
                  "data": {
                    "type": "string",
                    "description": "语音文件的base64编码。音频最长不超过 10 分钟。1s音频=12.5 Tokens，向上取整。"
                  },
                  "format": {
                    "type": "string",
                    "description": "语音文件的格式，支持wav和mp3",
                    "enum": ["wav", "mp3"]
                  }
                },
                "required": ["data", "format"],
                "additionalProperties": false
              }
            },
            "required": ["type", "input_audio"],
            "additionalProperties": false
          },
          {
            "title": "视频",
            "type": "object",

            "properties": {
              "type": {
                "type": "string",
                "enum": ["video_url"],
                "description": "内容类型为视频URL",
                "default": "video_url"
              },
              "video_url": {
                "type": "object",
                "description": "视频信息。注意：对于 GLM-4V-Plus-0111，video_url 参数必须在 content 数组的第一个位置。",
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "视频的URL地址。对于 GLM-4V-Plus，视频大小限制为20M以内，视频时长不超过30s。对于其他多模态模型，视频大小限制为200M以内。视频类型：mp4。"
                  }
                },
                "required": ["url"],
                "additionalProperties": false
              }
            },
            "required": ["type", "video_url"],
            "additionalProperties": false
          }
        ]
      },
      "ChatThinking": {
        "type": "object",
        "description": "Only support by GLM-4.5 and above models. This parameter is used to control whether the model enable the chain of thought.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Whether to enable the chain of thought, default: enabled",
            "default": "enabled",
            "enum": [
              "enabled",
              "disabled"
            ]
          }
        }
      },
      "WebSearchToolSchema": {
        "type": "object",
        "title": "Web Search",
        "properties": {
          "type": {
            "type": "string",
            "default": "web_search",
            "enum": [
              "web_search"
            ]
          },
          "web_search": {
            "$ref": "#/components/schemas/WebSearchObject"
          }
        },
        "required": [
          "type",
          "web_search"
        ],
        "additionalProperties": false
      },
      "WebSearchObject": {
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "description": "Whether to enable search functionality.\nDefault is `false`. Set to true to `enable`."
          },
          "search_engine": {
            "type": "string",
            "description": "Type of search engine.\nDefault is `search_pro_jina`. Supports: `search_pro_jina`.",
            "enum": [
              "search_pro_jina"
            ]
          },
          "search_query": {
            "type": "string",
            "description": "Force trigger a search"
          },
          "count": {
            "type": "integer",
            "description": "Number of returned results\nRange: `1-50`, max `50` results per search\nDefault is `10`\nSupported engines: `search_pro_jina`\n",
            "minimum": 1,
            "maximum": 50
          },
          "search_domain_filter": {
            "type": "string",
            "description": "Limits search results to specified whitelisted domains. Whitelist: input domains directly (e.g., www.example.com)\nSupported engines: `search_pro_jina`"
          },
          "search_recency_filter": {
            "type": "string",
            "description": "Limits search to a specific time range.\nDefault is `noLimit`\nValues:\n`oneDay`, within a day\n`oneWeek`, within a week\n`oneMonth`, within a month\n`oneYear`, within a year\n`noLimit`, no limit (default)\nSupported engines: `search_pro_jina`",
            "enum": [
              "oneDay",
              "oneWeek",
              "oneMonth",
              "oneYear",
              "noLimit"
            ]
          },
          "content_size": {
            "type": "string",
            "description": "Number of characters for webpage summaries.\nDefault is `medium`\n`medium`: Balanced mode for most queries. 400-600 characters\n`high`: Maximizes context for comprehensive answers, 2500 characters.",
            "enum": [
              "medium",
              "high"
            ]
          },
          "result_sequence": {
            "type": "string",
            "description": "Specifies whether search results are shown before or after model response. Options: `before`, `after`. Default is `after`",
            "enum": [
              "before",
              "after"
            ]
          },
          "search_result": {
            "type": "boolean",
            "description": "Whether to return search results in the response.\nDefault is `false`"
          },
          "require_search": {
            "type": "boolean",
            "description": "Whether to force model response based on search result.\nDefault is `false`"
          },
          "search_prompt": {
            "type": "string",
            "description": "Prompt to customize how search results are processed.\nDefault Prompt:\n`You are an intelligent Q&A expert with the ability to synthesize information, recognize time, understand semantics, and clean contradictory data. The current date is {{current_date}}. Use this as the only time reference. Based on the following information, provide a comprehensive and accurate answer to the user's question.Only extract valuable content for the answer. Ensure the answer is timely and authoritative. State the answer directly without citing data sources or internal processes.`"
          }
        },
        "required": [
          "search_engine"
        ]
      },
      "FunctionToolSchema": {
        "type": "object",
        "title": "Function Call",
        "properties": {
          "type": {
            "type": "string",
            "default": "function",
            "enum": [
              "function"
            ]
          },
          "function": {
            "$ref": "#/components/schemas/FunctionObject"
          }
        },
        "required": [
          "type",
          "function"
        ],
        "additionalProperties": false
      },
      "FunctionObject": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-zA-Z0-9_-]+$"
          },
          "description": {
            "type": "string",
            "description": "A description of what the function does, used by the model to choose when and how to call the function."
          },
          "parameters": {
            "$ref": "#/components/schemas/FunctionParameters"
          }
        },
        "required": [
          "name",
          "description",
          "parameters"
        ]
      },
      "FunctionParameters": {
        "type": "object",
        "description": "Parameters defined using JSON Schema. Must pass a JSON Schema object to accurately define accepted parameters. Omit if no parameters are needed when calling the function.",
        "additionalProperties": true
      },
      "RetrievalToolSchema": {
        "type": "object",
        "title": "Retrieval",
        "properties": {
          "type": {
            "type": "string",
            "default": "retrieval",
            "enum": [
              "retrieval"
            ]
          },
          "retrieval": {
            "$ref": "#/components/schemas/RetrievalObject"
          }
        },
        "required": [
          "type",
          "retrieval"
        ],
        "additionalProperties": false
      },
      "RetrievalObject": {
        "type": "object",
        "properties": {
          "knowledge_id": {
            "type": "string",
            "description": "Knowledge base ID, created or obtained from the platform"
          },
          "prompt_template": {
            "type": "string",
            "description": "Prompt template for requesting the model, a custom request template containing placeholders `{{ knowledge }}` and `{{ question }}`. Default template: Search for the answer to the question `{{question}}` in the document `{{ knowledge }}`. If an answer is found, respond only using statements from the document; if no answer is found, use your own knowledge to answer and inform the user that the information is not from the document. Do not repeat the question, start the answer directly."
          }
        },
        "required": [
          "knowledge_id"
        ]
      },
      "ChatCompletionResponse": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Task ID",
            "type": "string"
          },
          "request_id": {
            "description": "Request ID",
            "type": "string"
          },
          "created": {
            "description": "Request creation time, Unix timestamp in seconds",
            "type": "integer"
          },
          "model": {
            "description": "Model name",
            "type": "string"
          },
          "choices": {
            "type": "array",
            "description": "List of model responses",
            "items": {
              "type": "object",
              "properties": {
                "index": {
                  "type": "integer",
                  "description": "Result index."
                },
                "message": {
                  "$ref": "#/components/schemas/ChatCompletionResponseMessage"
                },
                "finish_reason": {
                  "type": "string",
                  "description": "Reason for model inference termination. Can be ‘stop’, ‘tool_calls’, ‘length’, ‘sensitive’, or ‘network_error’."
                }
              }
            }
          },
          "usage": {
            "type": "object",
            "description": "Token usage statistics returned when the model call ends.",
            "properties": {
              "prompt_tokens": {
                "type": "number",
                "description": "Number of tokens in user input"
              },
              "completion_tokens": {
                "type": "number",
                "description": "Number of output tokens"
              },
              "prompt_tokens_details": {
                "type": "object",
                "properties": {
                  "cached_tokens": {
                    "type": "number",
                    "description": "Number of tokens served from cache"
                  }
                }
              },
              "total_tokens": {
                "type": "integer",
                "description": "Total number of tokens"
              }
            }
          },
          "web_search": {
            "description": "Search results.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebSearchObjectResponse"
            }
          }
        }
      },
      "ChatCompletionResponseMessage": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "Current conversation role, default is ‘assistant’ (model)",
            "example": "assistant"
          },
          "content": {
            "type": "string",
            "description": "Current conversation content. Hits function is null, otherwise returns model inference result."
          },
          "reasoning_content": {
            "type": "string",
            "description": "Reasoning content, supports by GLM-4.5 series."
          },
          "tool_calls": {
            "type": "array",
            "description": "Function names and parameters generated by the model that should be called.",
            "items": {
              "$ref": "#/components/schemas/ChatCompletionResponseMessageToolCall"
            }
          }
        }
      },
      "ChatCompletionResponseMessageToolCall": {
        "type": "object",
        "properties": {
          "function": {
            "type": "object",
            "description": "Contains the function name and JSON format parameters generated by the model.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Model-generated function name."
              },
              "arguments": {
                "type": "object",
                "description": "JSON format of the function call parameters generated by the model. Validate the parameters before calling the function."
              }
            },
            "required": [
              "name",
              "arguments"
            ]
          },
          "id": {
            "type": "string",
            "description": "Unique identifier for the hit function."
          },
          "type": {
            "type": "string",
            "description": "Tool type called by the model, currently only supports ‘function’."
          }
        }
      },
      "CogVideoX3Request": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "model": {
                "type": "string",
                "description": "The model code to be called.",
                "enum": [
                  "cogvideox-3"
                ]
              },
              "prompt": {
                "type": "string",
                "description": "Text description of the video, maximum input length of 512 Tokens. Either image_url or prompt must be provided, or both."
              },
              "quality": {
                "type": "string",
                "description": "Output mode, default is `speed`.\n- `quality`: Prioritizes quality, higher generation quality. \n- `speed`: Prioritizes speed, faster generation time, relatively lower quality.",
                "example": "speed",
                "enum": [
                  "speed",
                  "quality"
                ]
              },
              "with_audio": {
                "type": "boolean",
                "description": "Whether to generate AI sound effects. Default: `false` (no sound effects).",
                "example": false
              },
              "image_url": {
                "type": "array",
                "description": "Provide an image based on which content will be generated. If this parameter is passed, the system will operate based on this image. Supports passing images via URL or Base64 encoding. Image requirements: images support `.png`, `.jpeg`, `.jpg` formats; image size: no more than `5M`. Either image_url and prompt can be used, or both can be passed simultaneously.\nFirst and last frames: supports inputting two images. The first uploaded image is regarded as the first frame, and the second image is regarded as the last frame. The model will generate the video based on the images passed in this parameter.\nFirst and last frame mode only supports `speed` mode",
                "items": {
                  "oneOf": [
                    {
                      "title": "Image URL",
                      "type": "string",
                      "format": "uri",
                      "example": "https://example.com/image.png"
                    },
                    {
                      "title": "Base64 Encoded Image",
                      "type": "string",
                      "format": "byte",
                      "example": "data:image/png;base64, XXX"
                    }
                  ]
                }
              },
              "size": {
                "type": "string",
                "description": "Default value: if not specified, the short side of the generated video is 1080 by default, and the long side is determined according to the original image ratio. Maximum support for 4K resolution. Resolution options: \"1280x720\", \"720x1280\", \"1024x1024\", \"1080x1920\", \"2048x1080\", \"3840x2160\"",
                "example": "1920x1080",
                "enum": [
                  "1280x720",
                  "720x1280",
                  "1024x1024",
                  "1920x1080",
                  "1080x1920",
                  "2048x1080",
                  "3840x2160"
                ]
              },
              "fps": {
                "type": "integer",
                "description": "Video frame rate (FPS), optional values are `30` or `60`. Default: `30`.",
                "example": 30,
                "enum": [
                  30,
                  60
                ]
              },
              "duration": {
                "type": "integer",
                "description": "Video duration, default is 5 seconds, supports `5` and `10` seconds.",
                "example": 5,
                "enum": [
                  5,
                  10
                ]
              }
            },
            "required": [
              "model"
            ]
          },
          {
            "$ref": "#/components/schemas/VideoCommonRequest"
          }
        ]
      },
      "ViduText2VideoRequest": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "model": {
                "type": "string",
                "description": "The model code to be called.",
                "enum": [
                  "viduq1-text"
                ]
              },
              "prompt": {
                "type": "string",
                "description": "Text description of the video, maximum input length of 512 Tokens."
              },
              "style": {
                "type": "string",
                "description": "Style\nDefault: `general`\nOptional values: `general` , `anime`\n- `general`: General style, can be controlled using prompts to define the style.\n- `anime`: Anime style, optimized for anime-specific visuals. The style can be controlled using different anime-themed prompts.",
                "enum": [
                  "general",
                  "anime"
                ]
              },
              "duration": {
                "type": "integer",
                "description": "Video duration parameter.\nDefault: `5` , Optional: `5`.",
                "example": 5,
                "enum": [
                  5
                ]
              },
              "aspect_ratio": {
                "type": "string",
                "description": "Aspect ratio\nDefault: `16:9`, Optional values: `16:9`, `9:16`, `1:1`",
                "example": "16:9",
                "enum": [
                  "16:9",
                  "9:16",
                  "1:1"
                ]
              },
              "size": {
                "type": "string",
                "description": "Resolution parameter\nDefault: `1920x1080`, Optional: `1920x1080`",
                "example": "1920x1080",
                "enum": [
                  "1920x1080"
                ]
              },
              "movement_amplitude": {
                "type": "string",
                "description": "Motion amplitude\nDefault: `auto` , Optional values:  `auto` ,`small` ,`medium` ,`large`",
                "example": "auto",
                "enum": [
                  "auto",
                  "small",
                  "medium",
                  "large"
                ]
              }
            },
            "required": [
              "model",
              "prompt"
            ]
          },
          {
            "$ref": "#/components/schemas/VideoCommonRequest"
          }
        ]
      },
      "ViduImage2VideoRequest": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "model": {
                "type": "string",
                "description": "The model code to be called.",
                "enum": [
                  "viduq1-image",
                  "vidu2-image"
                ]
              },
              "prompt": {
                "type": "string",
                "description": "Text description of the video, maximum input length of 512 Tokens. Either image_url or prompt must be provided, or both."
              },
              "image_url": {
                "type": "string",
                "description": "The model will use the image provided in this parameter as the first frame to generate the video.\nOnly `1` image is supported.\nSupported formats: `png` , `jpeg` , `jpg` , `webp` .\nImage aspect ratio must be less than `1:4` or `4:1`.\nImage file size must not exceed `50MB`.\nNote: After Base64 decoding, the byte length must be less than 50 MB, and the encoding must include the appropriate content type string (e.g., `data:image/png;base64,{base64_encode}`).",
                "oneOf": [
                  {
                    "title": "Image URL",
                    "type": "string",
                    "format": "uri",
                    "example": "https://example.com/image.png"
                  },
                  {
                    "title": "Base64 Encoded Image",
                    "type": "string",
                    "format": "byte",
                    "example": "data:image/png;base64, XXX"
                  }
                ]
              },
              "duration": {
                "oneOf": [
                  {
                    "title": "viduq1-image",
                    "type": "integer",
                    "description": "Video duration parameter.\nDefault: `5` , Optional: `5`.",
                    "example": 5,
                    "enum": [
                      5
                    ]
                  },
                  {
                    "title": "viduq2-image",
                    "type": "integer",
                    "description": "Video duration parameter.\nDefault: `4` , Optional: `4`.",
                    "example": 4,
                    "enum": [
                      4
                    ]
                  }
                ]
              },
              "size": {
                "oneOf": [
                  {
                    "title": "viduq1-image",
                    "type": "string",
                    "description": "Resolution parameter\nDefault: `1920x1080`, Optional: `1920x1080`",
                    "example": "1920x1080",
                    "enum": [
                      "1920x1080"
                    ]
                  },
                  {
                    "title": "viduq2-image",
                    "type": "string",
                    "description": "Resolution parameter\nDefault: `1280x720`, Optional: `1280x720`",
                    "example": "1280x720",
                    "default": "1280x720",
                    "enum": [
                      "1280x720"
                    ]
                  }
                ]
              },
              "movement_amplitude": {
                "type": "string",
                "description": "Motion amplitude\nDefault: `auto` , Optional values:  `auto` ,`small` ,`medium` ,`large`",
                "example": "auto",
                "enum": [
                  "auto",
                  "small",
                  "medium",
                  "large"
                ]
              },
              "with_audio": {
                "type": "boolean",
                "description": "Add background music to the generated video."
              }
            },
            "required": [
              "model"
            ]
          },
          {
            "$ref": "#/components/schemas/VideoCommonRequest"
          }
        ]
      },
      "ViduFrames2VideoRequest": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "model": {
                "type": "string",
                "description": "The model code to be called.",
                "enum": [
                  "viduq1-start-end",
                  "vidu2-start-end"
                ]
              },
              "prompt": {
                "type": "string",
                "description": "Text description of the video, maximum input length of 512 Tokens. Either image_url or prompt must be provided, or both."
              },
              "image_url": {
                "type": "array",
                "description": "Images\nSupports input of two images: the first uploaded image will be treated as the first frame, and the second image as the last frame. The model will use the images provided in this parameter to generate a video.\nThe resolutions of the two input images (first and last frame) must be similar, with the ratio between the resolution of the first frame and the resolution of the last frame falling within `0.8–1.25`. Additionally, the image aspect ratio must be less than `1:4` or `4:1`.\nSupports image URLs or images encoded in Base64 (ensure accessibility; using image URLs is recommended).\nSupported formats: `png`, `jpeg`, `.jpg`, `webp`.\nImage file size must not exceed `50 MB`.\nNote: After Base64 decoding, the byte length must be less than 50 MB, and the encoding must include the appropriate content type string, such as `data:image/png;base64,{base64_encode}`.",
                "items": {
                  "type": "string",
                  "minLength": 1
                },
                "minItems": 1,
                "maxItems": 2
              },
              "duration": {
                "oneOf": [
                  {
                    "title": "viduq1-start-end",
                    "type": "integer",
                    "description": "Video duration parameter.\nDefault: `5` , Optional: `5`.",
                    "example": 5,
                    "enum": [
                      5
                    ]
                  },
                  {
                    "title": "vidu2-start-end",
                    "type": "integer",
                    "description": "Video duration parameter.\nDefault: `4` , Optional: `4`.",
                    "example": 4,
                    "enum": [
                      4
                    ]
                  }
                ]
              },
              "size": {
                "oneOf": [
                  {
                    "title": "viduq1-start-end",
                    "type": "string",
                    "description": "Resolution parameter\nDefault: `1920x1080`, Optional: `1920x1080`",
                    "example": "1920x1080",
                    "enum": [
                      "1920x1080"
                    ]
                  },
                  {
                    "title": "vidu2-start-end",
                    "type": "string",
                    "description": "Resolution parameter\nDefault: `1280x720`, Optional: `1280x720`",
                    "example": "1280x720",
                    "default": "1280x720",
                    "enum": [
                      "1280x720"
                    ]
                  }
                ]
              },
              "movement_amplitude": {
                "type": "string",
                "description": "Motion amplitude\nDefault: `auto` , Optional values:  `auto` ,`small` ,`medium` ,`large`",
                "example": "auto",
                "enum": [
                  "auto",
                  "small",
                  "medium",
                  "large"
                ]
              },
              "with_audio": {
                "type": "boolean",
                "description": "Add background music to the generated video."
              }
            },
            "required": [
              "model"
            ]
          },
          {
            "$ref": "#/components/schemas/VideoCommonRequest"
          }
        ]
      },
      "ViduReference2VideoRequest": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "model": {
                "type": "string",
                "description": "The model code to be called.",
                "enum": [
                  "vidu2-reference"
                ]
              },
              "prompt": {
                "type": "string",
                "description": "Text description of the video, maximum input length of 512 Tokens. Either image_url or prompt must be provided, or both."
              },
              "image_url": {
                "type": "array",
                "description": "Image reference\nSupports input of 1 to 3 images. The model will use the themes from the images provided in this parameter as references to generate a video with consistent subjects.\n1. Supports image URLs or images encoded in Base64 (ensure accessibility; it is recommended to prioritize using image URLs).\n2. Supported formats: `png`, `jpeg`, `.jpg`, `webp`.\n3. Image resolution must not be smaller than `128x128`, and the aspect ratio must be less than `1:4` or `4:1`.\n4. Image file size must not exceed `50 MB`.\n5. Note: After Base64 decoding, the byte length must be less than 50 MB, and the encoding must include the proper content-type string, such as `data:image/png;base64,{base64_encode}`.",
                "items": {
                  "type": "string",
                  "minLength": 1
                },
                "minItems": 1,
                "maxItems": 3
              },
              "duration": {
                "title": "vidu2-reference",
                "type": "integer",
                "description": "Video duration parameter.\nDefault: `4` , Optional: `4`.",
                "example": 4,
                "enum": [
                  4
                ]
              },
              "aspect_ratio": {
                "type": "string",
                "description": "Aspect ratio\nDefault: `16:9`, Optional values: `16:9`, `9:16`, `1:1`",
                "example": "16:9",
                "enum": [
                  "16:9",
                  "9:16",
                  "1:1"
                ]
              },
              "size": {
                "title": "vidu2-reference ",
                "type": "string",
                "description": "Resolution parameter\nDefault: `1280x720`, Optional: `1280x720`",
                "example": "1280x720",
                "enum": [
                  "1280x720"
                ]
              },
              "movement_amplitude": {
                "type": "string",
                "description": "Motion amplitude\nDefault: `auto` , Optional values:  `auto` ,`small` ,`medium` ,`large`",
                "example": "auto",
                "enum": [
                  "auto",
                  "small",
                  "medium",
                  "large"
                ]
              },
              "with_audio": {
                "type": "boolean",
                "description": "Add background music to the generated video."
              }
            },
            "required": [
              "model"
            ]
          },
          {
            "$ref": "#/components/schemas/VideoCommonRequest"
          }
        ]
      },
      "VideoCommonRequest": {
        "type": "object",
        "properties": {
          "request_id": {
            "type": "string",
            "description": "Provided by the client, must be unique; used to distinguish each request’s unique identifier. If not provided by the client, the platform will generate one by default."
          },
          "user_id": {
            "type": "string",
            "description": "Unique ID of the end-user, assists the platform in intervening in end-user violations, generating illegal or inappropriate information, or other abusive behaviors. ID length requirement: minimum `6` characters, maximum `128` characters."
          }
        }
      },
      "VideoResponse": {
        "type": "object",
        "properties": {
          "model": {
            "description": "Model name used in this call.",
            "type": "string"
          },
          "id": {
            "description": "Task order number generated by the Z.AI, use this order number when calling the request result interface.",
            "type": "string"
          },
          "request_id": {
            "description": "Task number submitted by the user during the client request or generated by the platform.",
            "type": "string"
          },
          "task_status": {
            "description": "Processing status, `PROCESSING (processing)`,` SUCCESS (success)`, `FAIL (failure)`. Results need to be obtained via query.",
            "type": "string"
          }
        }
      },
      "WebSearchRequest": {
        "type": "object",
        "properties": {
          "search_query": {
            "type": "string",
            "description": "The content to be searched."
          },
          "search_engine": {
            "type": "string",
            "description": "The search engine code to call. Currently supported:\n`search_pro_jina`\n`search_pro_jina`: jina.ai Search Engine\nDefault is `search_pro_jina`.",
            "example": "search_pro_jina",
            "default": "search_pro_jina",
            "enum": [
              "search_pro_jina"
            ]
          },
          "count": {
            "type": "integer",
            "description": "The number of results to return\nFillable range: `1-50`, maximum `50` results per single search\nDefault is `10`\nSupported search engines: \n`search_pro_jina`.",
            "minimum": 1,
            "maximum": 50
          },
          "search_domain_filter": {
            "type": "string",
            "description": "Used to limit the scope of search results and only return content from specified whitelist domains.\nWhitelist: Directly enter the domain name (e.g., `www.example.com`)\nSupported search engines: \n`search_pro_jina`"
          },
          "search_recency_filter": {
            "type": "string",
            "description": "Search for webpages within a specified time range.\nDefault is `noLimit`\nFillable values:\n`oneDay`: within one day\n`oneWeek`: within one week\n`oneMonth`: within one month\n`oneYear`: within one year\n`noLimit`: no limit (default)\nSupported search engines: \n`search_pro_jina`",
            "enum": [
              "oneDay",
              "oneWeek",
              "oneMonth",
              "oneYear",
              "noLimit"
            ]
          },
          "content_size": {
            "type": "string",
            "description": "The number of characters in the webpage summary.\nDefault is `medium`\n`medium`: Balanced mode for most queries, 400-600 characters\n`high`: Maximizes context for comprehensive answers, 2500 characters.",
            "example": "medium",
            "default": "medium",
            "enum": [
              "medium",
              "high"
            ]
          },
          "request_id": {
            "type": "string",
            "description": "User-provided unique identifier for distinguishing requests. If not provided, the platform will generate one."
          },
          "user_id": {
            "type": "string",
            "description": "Unique ID of the end user, helping the platform intervene in illegal activities, inappropriate content generation, or other abuses. ID length: 6 to 128 characters."
          }
        },
        "required": [
          "search_query"
        ]
      },
      "WebSearchResponse": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Task ID.",
            "type": "string"
          },
          "created": {
            "description": "Request creation time, Unix timestamp in seconds.",
            "type": "integer"
          },
          "search_intent": {
            "description": "Search intent results.",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "query": {
                  "type": "string",
                  "description": "Original search query."
                },
                "intent": {
                  "type": "string",
                  "description": "Recognized intent type.\n`SEARCH_ALL`: Search the entire web\n`SEARCH_NONE`: No search intent"
                },
                "keywords": {
                  "type": "string",
                  "description": "Rewritten search keywords."
                }
              }
            }
          },
          "search_result": {
            "description": "Search results.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebSearchObjectResponse"
            }
          }
        }
      },
      "WebSearchObjectResponse": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title."
          },
          "content": {
            "type": "string",
            "description": "Content summary."
          },
          "link": {
            "type": "string",
            "description": "Result URL."
          },
          "media": {
            "type": "string",
            "description": "Website name."
          },
          "icon": {
            "type": "string",
            "description": "Website icon."
          },
          "refer": {
            "type": "string",
            "description": "Index number."
          },
          "publish_date": {
            "type": "string",
            "description": "Website publication date."
          }
        }
      },
      "TranslationAgentRequest": {
        "type": "object",
        "properties": {
          "agent_id": {
            "type": "string",
            "description": "Fixed value: `general_translation`.",
            "enum": [
              "general_translation"
            ]
          },
          "stream": {
            "type": "boolean",
            "description": "False for sync calls (default). True for streaming."
          },
          "messages": {
            "type": "array",
            "description": "Session message body.",
            "items": {
              "type": "object",
              "properties": {
                "role": {
                  "type": "string",
                  "description": "User input role: `user`",
                  "example": "user",
                  "default": "user",
                  "enum": [
                    "user"
                  ]
                },
                "content": {
                  "type": "array",
                  "description": "Content list.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "Supported type: `text`.",
                        "default": "text",
                        "enum": [
                          "text"
                        ]
                      },
                      "text": {
                        "type": "string",
                        "description": "User text input."
                      }
                    },
                    "required": [
                      "type",
                      "text"
                    ]
                  }
                }
              },
              "required": [
                "role",
                "content"
              ]
            }
          },
          "custom_variables": {
            "type": "object",
            "properties": {
              "source_lang": {
                "type": "string",
                "description": "Supported language codes (default: `auto`):\n- `auto`: Auto Detect\n- `zh-CN`: Simplified Chinese\n- `zh-TW`: Traditional Chinese\n- `wyw`: Classical Chinese\n- `yue`: Cantonese\n- `en`: English\n- `ja`: Japanese\n- `ko`: Korean\n- `fr`: French\n- `de`: German\n- `es`: Spanish\n- `ru`: Russian\n- `pt`: Portuguese\n- `it`: Italian\n- `ar`: Arabic\n- `hi`: Hindi\n- `bg`: Bulgarian\n- `cs`: Czech\n- `da`: Danish\n- `el`: Greek\n- `et`: Estonian\n- `fi`: Finnish\n- `hu`: Hungarian\n- `id`: Indonesian\n- `lt`: Lithuanian\n- `lv`: Latvian\n- `nl`: Dutch\n- `no`: Norwegian Bokmål\n- `pl`: Polish\n- `ro`: Romanian\n- `sk`: Slovak\n- `sl`: Slovenian\n- `sv`: Swedish\n- `th`: Thai\n- `tr`: Turkish\n- `uk`: Ukrainian\n- `vi`: Vietnamese\n- `my`: Burmese\n- `ms`: Malay\n- `Pinyin`: Pinyin\n- `IPA`: International Phonetic Alphabet\n",
                "enum": [
                  "auto",
                  "zh-CN",
                  "zh-TW",
                  "wyw",
                  "yue",
                  "en",
                  "ja",
                  "ko",
                  "fr",
                  "de",
                  "es",
                  "ru",
                  "pt",
                  "it",
                  "ar",
                  "hi",
                  "bg",
                  "cs",
                  "da",
                  "el",
                  "et",
                  "fi",
                  "hu",
                  "id",
                  "lt",
                  "lv",
                  "nl",
                  "no",
                  "pl",
                  "ro",
                  "sk",
                  "sl",
                  "sv",
                  "th",
                  "tr",
                  "uk",
                  "vi",
                  "my",
                  "ms",
                  "Pinyin",
                  "IPA"
                ]
              },
              "target_lang": {
                "type": "string",
                "description": "Target language code (default: `zh-CN`):\n- `zh-CN`: Simplified Chinese\n- `zh-TW`: Traditional Chinese\n- `wyw`: Classical Chinese\n- `yue`: Cantonese\n- `en`: English\n- `en-GB`: English (British)\n- `en-US`: English (American)\n- `ja`: Japanese\n- `ko`: Korean\n- `fr`: French\n- `de`: German\n- `es`: Spanish\n- `ru`: Russian\n- `pt`: Portuguese\n- `it`: Italian\n- `ar`: Arabic\n- `hi`: Hindi\n- `bg`: Bulgarian\n- `cs`: Czech\n- `da`: Danish\n- `el`: Greek\n- `et`: Estonian\n- `fi`: Finnish\n- `hu`: Hungarian\n- `id`: Indonesian\n- `lt`: Lithuanian\n- `lv`: Latvian\n- `nl`: Dutch\n- `no`: Norwegian Bokmål\n- `pl`: Polish\n- `ro`: Romanian\n- `sk`: Slovak\n- `sl`: Slovenian\n- `sv`: Swedish\n- `th`: Thai\n- `tr`: Turkish\n- `uk`: Ukrainian\n- `vi`: Vietnamese\n- `my`: Burmese\n- `ms`: Malay\n- `Pinyin`: Pinyin\n- `IPA`: International Phonetic Alphabet\n.",
                "enum": [
                  "zh-CN",
                  "zh-TW",
                  "wyw",
                  "yue",
                  "en",
                  "en-GB",
                  "en-US",
                  "ja",
                  "ko",
                  "fr",
                  "de",
                  "es",
                  "ru",
                  "pt",
                  "it",
                  "ar",
                  "hi",
                  "bg",
                  "cs",
                  "da",
                  "el",
                  "et",
                  "fi",
                  "hu",
                  "id",
                  "lt",
                  "lv",
                  "nl",
                  "no",
                  "pl",
                  "ro",
                  "sk",
                  "sl",
                  "sv",
                  "th",
                  "tr",
                  "uk",
                  "vi",
                  "my",
                  "ms",
                  "Pinyin",
                  "IPA"
                ]
              },
              "glossary": {
                "type": "string",
                "description": "Glossary ID."
              },
              "strategy": {
                "type": "string",
                "description": "Translation strategy (default: `general`)，Optional:\n- `general`: General Translation\n- `paraphrase`: Paraphrase Translation\n- `two_step`: Two-Step Translation\n- `three_step`: Three-Stage Translation\n- `reflection`: Reflection Translation; cot: COT Translation",
                "enum": [
                  "general",
                  "paraphrase",
                  "two_step",
                  "three_step",
                  "reflection"
                ]
              },
              "strategy_config": {
                "type": "object",
                "description": "Strategy parameters.",
                "properties": {
                  "general": {
                    "type": "object",
                    "properties": {
                      "suggestion": {
                        "type": "string",
                        "description": "Translation suggestions or style requirements (e.g., terminology mapping, style guidelines)."
                      }
                    }
                  },
                  "cot": {
                    "type": "object",
                    "description": "Parameters when strategy is `cot`.",
                    "properties": {
                      "reason_lang": {
                        "type": "string",
                        "description": "Language for translation reasoning, values: [`from`｜`to`], default: `to`.",
                        "enum": [
                          "from",
                          "to"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "required": [
          "agent_id",
          "messages"
        ]
      },
      "TranslationAgentResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Task ID."
          },
          "agent_id": {
            "type": "string",
            "description": "Agent ID."
          },
          "status": {
            "type": "string",
            "description": "Task status."
          },
          "choices": {
            "type": "array",
            "description": "Model output content.",
            "items": {
              "type": "object",
              "properties": {
                "index": {
                  "type": "integer",
                  "description": "Result index."
                },
                "finish_reason": {
                  "type": "string",
                  "description": "Termination reason: `stop` (normal completion), `tool_calls` (model calls), `length` (token limit exceeded), `sensitive` (content flagged), `network_error` (model inference error)."
                },
                "messages": {
                  "type": "object",
                  "description": "Model response message.",
                  "properties": {
                    "role": {
                      "type": "string",
                      "description": "Dialog role (default: `assistant`)."
                    },
                    "content": {
                      "type": "object",
                      "description": "Inference result",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Result type."
                        },
                        "text": {
                          "type": "string",
                          "description": "Result content."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "usage": {
            "type": "object",
            "description": "Token usage statistics.",
            "properties": {
              "prompt_tokens": {
                "type": "integer",
                "description": "Input tokens count."
              },
              "completion_tokens": {
                "type": "integer",
                "description": "Output tokens count."
              },
              "total_tokens": {
                "type": "integer",
                "description": "Total tokens count."
              },
              "total_calls": {
                "type": "integer",
                "description": "Total number of calls"
              }
            }
          }
        }
      },
      "SpecialEffectsVideosAgentRequest": {
        "type": "object",
        "properties": {
          "agent_id": {
            "type": "string",
            "description": "Fixed value: `vidu_template_agent`.",
            "enum": [
              "vidu_template_agent"
            ]
          },
          "request_id": {
            "type": "string",
            "description": "User-defined unique ID; used to distinguish requests. Auto-generated if omitted."
          },
          "messages": {
            "type": "array",
            "description": "Session message body.",
            "items": {
              "type": "object",
              "properties": {
                "role": {
                  "type": "string",
                  "description": "User input role: `user`",
                  "example": "user",
                  "default": "user",
                  "enum": [
                    "user"
                  ]
                },
                "content": {
                  "type": "array",
                  "description": "Content list.",
                  "items": {
                    "oneOf": [
                      {
                        "title": "text",
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "Specifies that this content is text.",
                            "enum": [
                              "text"
                            ]
                          },
                          "text": {
                            "type": "string",
                            "description": "User text input."
                          }
                        },
                        "required": [
                          "type",
                          "text"
                        ]
                      },
                      {
                        "title": "image_url",
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "Specifies that this content is an image URL.",
                            "enum": [
                              "image_url"
                            ]
                          },
                          "image_url": {
                            "type": "string",
                            "format": "uri",
                            "description": "Image URL input."
                          }
                        },
                        "required": [
                          "type",
                          "image_url"
                        ]
                      }
                    ]
                  }
                }
              },
              "required": [
                "role",
                "content"
              ]
            }
          },
          "custom_variables": {
            "type": "object",
            "description": "Agent extension parameters.",
            "properties": {
              "template": {
                "type": "string",
                "description": "Effect template: `french_kiss`, `bodyshake`, or `sexy_me`.",
                "enum": [
                  "french_kiss",
                  "bodyshake",
                  "sexy_me"
                ]
              }
            },
            "required": [
              "template"
            ]
          }
        },
        "required": [
          "agent_id",
          "messages"
        ]
      },
      "SpecialEffectsVideosAgentResponse": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "async_id": {
                "type": "string",
                "description": "Asynchronous task ID."
              }
            }
          },
          {
            "$ref": "#/components/schemas/SpecialEffectsVideosAgentError"
          }
        ]
      },
      "SpecialEffectsVideosAgentError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Status: `pending` (task created), `failed` (task creation failed)."
          },
          "agent_id": {
            "type": "string",
            "description": "Fixed value: `vidu_template_agent`."
          },
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Error code."
              },
              "message": {
                "type": "string",
                "description": "Error message."
              }
            }
          }
        }
      },
      "CommonAgentResultRequest": {
        "type": "object",
        "properties": {
          "agent_id": {
            "type": "string",
            "description": "Fixed value: `vidu_template_agent`."
          },
          "async_id": {
            "type": "string",
            "description": "Task ID from async response."
          }
        }
      },
      "CommonAgentResultResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "`pending` (processing), `success` (completed), `failed` (failed)."
          },
          "agent_id": {
            "type": "string",
            "description": "Fixed value: `vidu_template_agent`."
          },
          "async_id": {
            "type": "string",
            "description": "Asynchronous task ID."
          },
          "choices": {
            "type": "array",
            "description": "Agent output.",
            "items": {
              "type": "object",
              "properties": {
                "index": {
                  "type": "integer",
                  "description": "Result index."
                },
                "finish_reason": {
                  "type": "string",
                  "description": "Reason for model inference termination. Can be ‘stop’, ‘tool_calls’, ‘length’, ‘sensitive’, or ‘network_error’."
                },
                "message": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "role": {
                        "type": "string",
                        "description": "Role: fixed as `assistant`."
                      },
                      "content": {
                        "type": "array",
                        "description": "Video file metadata",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "Fixed value: `video_url`."
                            },
                            "video_url": {
                              "type": "string",
                              "description": "MP4 video URL."
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "BadRequestData": {},
      "UnauthorizedData": {},
      "NotFoundData": {},
      "Error": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "description": "The request has failed.",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32",
            "description": "Error code."
          },
          "message": {
            "type": "string",
            "description": "Error message."
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "Use the following format for authentication: Bearer [<your api key>](https://z.ai/manage-apikey/apikey-list)"
      }
    }
  }
}
