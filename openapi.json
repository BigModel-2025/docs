{
  "openapi": "3.0.1",
  "info": {
    "title": "BigModel API",
    "description": "BigModel API available endpoints",
    "license": {
      "name": "BigModel Developer Agreement and Policy",
      "url": "https://bigmodel.cn/?lang=en"
    },
    "version": "1.0.0",
    "contact": {
      "name": "BigModel Developers",
      "url": "https://bigmodel.cn/dev/howuse/useragreement?lang=en",
      "email": "service@zhipuai.cn"
    }
  },
  "servers": [
    {
      "url": "https://open.bigmodel.cn/api"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/paas/v4/chat/completions": {
      "post": {
        "description": "Creates a model response for the given chat conversation.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatCompletionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "plant response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatCompletionResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ChatCompletionRequest": {
        "required": [
          "model",
          "messages"
        ],
        "type": "object",
        "properties": {
          "model": {
            "type": "string",
            "description": "The model code to be called.",
            "example": "glm-4-flash",
            "default": "glm-4-plus",
            "enum": [
              "glm-4-flash",
              "glm-4-plus",
              "glm-4-air",
              "glm-4-air-250414"
            ]
          },
          "messages": {
            "type": "array",
            "description": "The current conversation message list as the model’s prompt input, provided in JSON array format, e.g.,`{“role”: “user”, “content”: “Hello”}`. Possible message types include system messages, user messages, assistant messages, and tool messages.",
            "items": {
              "type": "object",
              "properties": {
                "role": {
                  "type": "string",
                  "description": "The role of the messages author. Choice between: system, user, or assistant.",
                  "example": "user",
                  "default": "user",
                  "enum": [
                    "user",
                    "assistant",
                    "system"
                  ]
                },
                "content": {
                  "type": "string",
                  "description": "Message content.",
                  "example": "What opportunities and challenges will the Chinese large model industry face in 2025?"
                }
              },
              "required": [
                "role",
                "content"
              ]
            },
            "minItems": 1,
            "maxItems": 10
          },
          "request_id": {
            "type": "string",
            "description": "Passed by the user side, needs to be unique; used to distinguish each request. If not provided by the user side, the platform will generate one by default."
          },
          "do_sample": {
            "type": "boolean",
            "example": true,
            "default": true,
            "description": "When do_sample is true, sampling strategy is enabled; when do_sample is false, sampling strategy parameters such as temperature and top_p will not take effect. Default value is `true`."
          },
          "stream": {
            "type": "boolean",
            "example": false,
            "default": false,
            "description": "This parameter should be set to false or omitted when using synchronous call. It indicates that the model returns all content at once after generating all content. Default value is false. If set to true, the model will return the generated content in chunks via standard Event Stream. When the Event Stream ends, a `data: [DONE]` message will be returned."
          },
          "temperature": {
            "type": "number",
            "description": "Sampling temperature, controls the randomness of the output, must be a positive number within the range: `[0.0, 1.0]`, default value is `0.95`.",
            "format": "float",
            "example": 0.95,
            "default": 0.95,
            "minimum": 0.0,
            "maximum": 1.0
          },
          "top_p": {
            "type": "number",
            "description": "Another method of temperature sampling, value range is: `[0.0, 1.0]`, default value is `0.7`.",
            "format": "float",
            "example": 0.7,
            "default": 0.7,
            "minimum": 0.0,
            "maximum": 1.0
          },
          "max_tokens": {
            "type": "integer",
            "description": "The maximum number of tokens for model output, maximum output is `4095`, default value is `1024`.",
            "example": 1024,
            "default": 1024,
            "minimum": 1,
            "maximum": 4095
          },
          "tools": {
            "type": "array",
            "description": "A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.\n",
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/WebSearchToolSchema"
                }
              },
              {
                "items": {
                  "$ref": "#/components/schemas/FunctionToolSchema"
                }
              },
              {
                "items": {
                  "$ref": "#/components/schemas/RetrievalToolSchema"
                }
              }
            ]
          }
        }
      },
      "WebSearchToolSchema": {
        "type": "object",
        "title": "Web Search",
        "properties": {
          "type": {
            "type": "string",
            "default": "web_search",
            "enum": [
              "web_search"
            ]
          },
          "web_search": {
            "$ref": "#/components/schemas/WebSearchObject"
          }
        },
        "required": [
          "type",
          "web_search"
        ],
        "additionalProperties": false
      },
      "WebSearchObject": {
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "description": "Whether to enable search functionality. Default is `false`. Set to true to `enable`."
          },
          "search_engine": {
            "type": "string",
            "description": "Type of search engine. Default is `search_std`. Supports: `search_std`, `search_pro`, `search_pro_sogou`, `search_pro_quark`, `search_pro_jina`, `search_pro_bing`.",
            "enum": [
              "search_std",
              "search_pro",
              "search_pro_sogou",
              "search_pro_quark",
              "search_pro_jina",
              "search_pro_bing"
            ]
          },
          "search_query": {
            "type": "string",
            "description": "Force trigger a search"
          },
          "count": {
            "type": "integer",
            "description": "Number of returned results\nRange: `1-50`, max `50` results per search\nDefault is `10`\nSupported engines: `search_std`, `search_pro`, `search_pro_sogou`\nFor `search_pro_sogou`: allowed values are `10`, `20`, `30`, `40`, `50`",
            "minimum": 1,
            "maximum": 50
          },
          "search_domain_filter": {
            "type": "string",
            "description": "Limits search results to specified whitelisted domains. Whitelist: input domains directly (e.g., www.example.com)\nSupported engines: `search_std`, `search_pro`, `search_pro_sogou`, `search_pro_Jina`"
          },
          "search_recency_filter": {
            "type": "string",
            "description": "Limits search to a specific time range. Default is `noLimit`\nValues:\n`oneDay`, within a day\n`oneWeek`, within a week\n`oneMonth`, within a month\n`oneYear`, within a year\n`noLimit`, no limit (default)\nSupported engines: `search_std`, `search_pro`, `search_pro_sogou`, `search_pro_quark`",
            "enum": [
              "oneDay",
              "oneWeek",
              "oneMonth",
              "oneYear",
              "noLimit"
            ]
          },
          "content_size": {
            "type": "string",
            "description": "Number of characters for webpage summaries. Default is `medium`\n`medium`: Balanced mode for most queries. 400-600 characters\n`high`: Maximizes context for comprehensive answers, 2500 characters.",
            "enum": [
              "medium",
              "high"
            ]
          },
          "result_sequence": {
            "type": "string",
            "description": "Specifies whether search results are shown before or after model response. Options: `before`, `after`. Default is `after`",
            "enum": [
              "before",
              "after"
            ]
          },
          "search_result": {
            "type": "boolean",
            "description": "Whether to return search results in the response. Default is `false`"
          },
          "require_search": {
            "type": "boolean",
            "description": "Whether to force model response based on search result. Default is `false`"
          },
          "search_prompt": {
            "type": "string",
            "description": "Prompt to customize how search results are processed. Default Prompt:\n`You are an intelligent Q&A expert with the ability to synthesize information, recognize time, understand semantics, and clean contradictory data. The current date is {{current_date}}. Use this as the only time reference. Based on the following information, provide a comprehensive and accurate answer to the user's question.Only extract valuable content for the answer. Ensure the answer is timely and authoritative. State the answer directly without citing data sources or internal processes.`"
          }
        },
        "required": [
          "search_engine"
        ]
      },
      "FunctionToolSchema": {
        "type": "object",
        "title": "Function Call",
        "properties": {
          "type": {
            "type": "string",
            "default": "function",
            "enum": [
              "function"
            ]
          },
          "function": {
            "$ref": "#/components/schemas/FunctionObject"
          }
        },
        "required": [
          "type",
          "function"
        ],
        "additionalProperties": false
      },
      "FunctionObject": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.",
            "minLength": 1,
            "maxLength": 64,
            "pattern": "^[a-zA-Z0-9_-]+$"
          },
          "description": {
            "type": "string",
            "description": "A description of what the function does, used by the model to choose when and how to call the function."
          },
          "parameters": {
            "$ref": "#/components/schemas/FunctionParameters"
          }
        },
        "required": [
          "name",
          "description",
          "parameters"
        ]
      },
      "FunctionParameters": {
        "type": "object",
        "description": "Parameters defined using JSON Schema. Must pass a JSON Schema object to accurately define accepted parameters. Omit if no parameters are needed when calling the function.",
        "additionalProperties": true
      },
      "RetrievalToolSchema": {
        "type": "object",
        "title": "Retrieval",
        "properties": {
          "type": {
            "type": "string",
            "default": "retrieval",
            "enum": [
              "retrieval"
            ]
          },
          "retrieval": {
            "$ref": "#/components/schemas/RetrievalObject"
          }
        },
        "required": [
          "type",
          "retrieval"
        ],
        "additionalProperties": false
      },
      "RetrievalObject": {
        "type": "object",
        "properties": {
          "knowledge_id": {
            "type": "string",
            "description": "Knowledge base ID, created or obtained from the platform"
          },
          "prompt_template": {
            "type": "string",
            "description": "Prompt template for requesting the model, a custom request template containing placeholders `{{ knowledge }}` and `{{ question }}`. Default template: `Search for the answer to the question `{{question}}` in the document `{{ knowledge }}`. If an answer is found, respond only using statements from the document; if no answer is found, use your own knowledge to answer and inform the user that the information is not from the document. Do not repeat the question, start the answer directly.`"
          }
        },
        "required": [
          "knowledge_id"
        ]
      },
      "ChatCompletionResponse": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Task ID",
            "type": "string"
          },
          "created": {
            "description": "Request creation time, Unix timestamp in seconds",
            "type": "integer"
          },
          "model": {
            "description": "Model name",
            "type": "string"
          },
          "choices": {
            "type": "array",
            "description": "List of model responses",
            "items": {
              "type": "object",
              "properties": {
                "index": {
                  "type": "integer",
                  "description": "Result index"
                },
                "message": {
                  "$ref": "#/components/schemas/ChatCompletionResponseMessage"
                },
                "finish_reason": {
                  "type": "string",
                  "description": "Reason for model inference termination. Can be ‘stop’, ‘tool_calls’, ‘length’, ‘sensitive’, or ‘network_error’."
                }
              }
            }
          },
          "usage": {
            "type": "object",
            "description": "Token usage statistics returned when the model call ends.",
            "properties": {
              "prompt_tokens": {
                "type": "integer",
                "description": "Number of tokens in user input"
              },
              "completion_tokens": {
                "type": "integer",
                "description": "Number of tokens in model output"
              },
              "total_tokens": {
                "type": "integer",
                "description": "Total number of tokens"
              }
            }
          },
          "web_search": {
            "type": "array",
            "description": "Information related to web search results.",
            "items": {
              "type": "object",
              "properties": {
                "icon": {
                  "type": "string",
                  "description": "Icon of the source website."
                },
                "title": {
                  "type": "string",
                  "description": "Title of the search result."
                },
                "link": {
                  "type": "string",
                  "description": "Web link of the search result."
                },
                "media": {
                  "type": "string",
                  "description": "Media source name of the search result webpage."
                },
                "publish_date": {
                  "type": "string",
                  "description": "Website publication date."
                },
                "content": {
                  "type": "string",
                  "description": "Text content quoted from the search result webpage."
                },
                "refer": {
                  "type": "string",
                  "description": "Reference index."
                }
              }
            }
          }
        }
      },
      "ChatCompletionResponseMessage": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "description": "Current conversation role, default is ‘assistant’ (model)",
            "example": "assistant"
          },
          "content": {
            "type": "string",
            "description": "Current conversation content. Hits function is null, otherwise returns model inference result."
          },
          "tool_calls": {
            "type": "array",
            "description": "Function names and parameters generated by the model that should be called.",
            "items": {
              "$ref": "#/components/schemas/ChatCompletionResponseMessageToolCall"
            }
          }
        }
      },
      "ChatCompletionResponseMessageToolCall": {
        "type": "object",
        "properties": {
          "function": {
            "type": "object",
            "description": "Contains the function name and JSON format parameters generated by the model.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Model-generated function name."
              },
              "arguments": {
                "type": "object",
                "description": "JSON format of the function call parameters generated by the model. Validate the parameters before calling the function."
              }
            },
            "required": [
              "name",
              "arguments"
            ]
          },
          "id": {
            "type": "string",
            "description": "Unique identifier for the hit function."
          },
          "type": {
            "type": "string",
            "description": "Tool type called by the model, currently only supports ‘function’."
          }
        }
      },
      "Error": {
        "required": [
          "error",
          "message"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "Use the following format for authentication: Bearer [<your api key>](https://bigmodel.cn/usercenter/proj-mgmt/apikeys)"
      }
    }
  }
}